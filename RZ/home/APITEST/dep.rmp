<?xml version="1.0" encoding="UTF-8"?><process version="8.1.000">
  <context>
    <input/>
    <output/>
    <macros/>
  </context>
  <operator activated="true" class="process" compatibility="8.1.000" expanded="true" name="Process">
    <parameter key="logverbosity" value="init"/>
    <parameter key="random_seed" value="2001"/>
    <parameter key="send_mail" value="never"/>
    <parameter key="notification_email" value=""/>
    <parameter key="process_duration_for_mail" value="30"/>
    <parameter key="encoding" value="UTF-8"/>
    <process expanded="true">
      <operator activated="true" class="r_scripting:execute_r" compatibility="7.2.000" expanded="true" height="82" name="Execute R" width="90" x="246" y="85">
        <parameter key="script" value="# rm_main is a mandatory function, &#10;# the number of arguments has to be the number of input ports (can be none)&#10;rm_main = function(data1,data2)&#10;{&#10;&#10;#args = commandArgs(trailingOnly=TRUE)&#10;library(&quot;data.table&quot;) #|| install.packages(&quot;data.table&quot;)&#10;library(&quot;stringr&quot;) #|| install.packages(&quot;stringr&quot;)&#10;library(&quot;compare&quot;) #|| install.packages(&quot;compare&quot;)&#10;#library(&quot;caret&quot;) #|| install.packages(&quot;caret&quot;)&#10;library(&quot;geosphere&quot;) #|| install.packages(&quot;geosphere&quot;)&#10;library(&quot;maps&quot;) #|| install.packages(&quot;maps&quot;)&#10;#library(&quot;proxy&quot;) #|| install.packages(&quot;proxy&quot;)&#10;library(&quot;quantmod&quot;) #|| install.packages(&quot;quantmod&quot;)&#10;library(&quot;XML&quot;) #|| install.packages(&quot;XML&quot;)&#10;library(&quot;RCurl&quot;) #|| install.packages(&quot;RCurl&quot;)&#10;library(&quot;cluster&quot;) #|| install.packages(&quot;cluster&quot;)&#10;library(&quot;plotrix&quot;) #|| install.packages(&quot;plotrix&quot;)&#10;#library(&quot;matrixStats&quot;)&#10;##################################################&#10;# library(readr)&#10;# Industry &lt;- read_csv(&quot;/home/groot/DevX/RMIG/Industry.csv&quot;, col_types = cols(`EV/Ebit` = col_skip(),&#10;#                                                       `EV/Sales` = col_skip()))&#10;# View(Industry)&#10;# industry_ref&lt;- Industry[complete.cases(Industry[,1:3]),]&#10;# industry_ref$`%_1`[which(is.na(industry_ref$`%_1`))]&lt;-0&#10;# save(industry_ref,file = &quot;/home/groot/DevX/RMIG/industry_ref.Rda&quot;)&#10;load('/home/groot/DevX/RMIG/industry_ref.Rda')&#10;##################################################&#10;#args=c('Food_Beverage','6120','5','13')#'REIT - Retail'  'Specialty Retail'&#10;# sector_raw&lt;- unlist(strsplit(args[1],&quot;_&quot;))&#10;# sector=&quot;&quot;&#10;# for(i in 1:length(sector_raw)){&#10;#   sector&lt;-paste(sector,sector_raw[i],sep=&quot; &quot;)&#10;# }&#10;# sector&lt;-trimws(sector, &quot;l&quot;)&#10;# print(sector)&#10;industry_raw&lt;- &quot;Chemicals&quot;#unlist(strsplit(args[1],&quot;_&quot;))&#10;industry&lt;-industry_ref[which(industry_ref$Instaval==industry_raw),c(2,4)]&#10;if(is.na(industry[2])){&#10;  industry&lt;-industry[1]&#10;}&#10;print(industry)&#10;n=c(&quot;test&quot;,6120,5,13)&#10;sample_input&lt;- unlist(strsplit(n,','))#c(&quot;Canada&quot;,&quot;Technology&quot;,6120,5,13)&#10;#Sector&lt;-&quot;Consumer Goods&quot;#paste(names[1],names[2],sep=&quot; &quot;)#&quot;Consumer Goods&quot;&#10;print(sample_input)&#10;#filename &lt;- &quot;C:\\script_testing_automation\\company_profiles_Processed_v2.csv&quot;&#10;all_data &lt;- read.csv(&quot;/home/groot/DevX/RMIG/company_profiles_Processed_v2.csv&quot;,stringsAsFactors = FALSE,header = TRUE)&#10;all_data[all_data=='-']&lt;-NA&#10;all_data2 &lt;- all_data[complete.cases(all_data),]&#10;all_data2$Sector&lt;-trimws(all_data2$Sector, &quot;r&quot;)&#10;#all_data2&lt;-all_data2[which(all_data2$Industry==industry),]&#10;if (length(industry)&gt;1){&#10;  all_data2&lt;-all_data2[which(all_data2$Industry== industry$`Industry 1`[1] | all_data2$Industry== industry$`Industry 2`[1] ),]&#10;}else{&#10;  all_data2&lt;-all_data2[which(all_data2$Industry== industry$`Industry 1`[1]),]#&#10;}&#10;#all_data2&lt;-all_data2[which(all_data2$Industry=='REIT - Retail' | all_data2$Industry=='Specialty Retail, Other' ),]&#10;all_data2$Geography[all_data2$Geography==&quot; United Kingdom&quot;]&lt;- 'UK'&#10;all_data2$Geography[all_data2$Geography==&quot; Channel Islands&quot;]&lt;- 'UK'&#10;all_data2$Geography[all_data2$Geography==&quot; Hong Kong&quot;]&lt;- 'China'&#10;all_data2$Geography[all_data2$Geography==&quot; South Korea&quot;]&lt;- 'Korea South'&#10;&#10;for(i in 1:nrow(all_data2)){&#10;  &#10;  tryCatch({&#10;    prices &lt;- getSymbols(all_data2$Company[i],from=Sys.Date()-10,auto.assign = FALSE)&#10;    all_data2$close_price[i] &lt;- drop(coredata(prices[nrow(prices),4]) )&#10;    print(paste(&quot;closing price&quot;, all_data2$Company[i], sep=&quot; -&gt; &quot;))&#10;  }, warning = function(w) {&#10;    print(w)&#10;    all_data2$close_price[i]&lt;- NA&#10;  },error = function(e) {&#10;    print(e)&#10;    all_data2$close_price[i]&lt;- NA&#10;  }&#10;  )&#10;  &#10;}&#10;##################################&#10;all_data2$Growth &lt;- gsub(&quot;%&quot;,&quot;&quot;,all_data2$Growth)&#10;all_data2$Profitability &lt;- gsub(&quot;%&quot;,&quot;&quot;,all_data2$Profitability)&#10;all_data2$Sales.in.million &lt;- gsub(&quot;,&quot;,&quot;&quot;,all_data2$Sales.in.million)&#10;all_data2$Growth &lt;- as.numeric(all_data2$Growth)&#10;all_data2$Profitability &lt;- as.numeric(all_data2$Profitability)&#10;all_data2$Sales.in.million &lt;- as.numeric(all_data2$Sales.in.million)&#10;all_data2$Stock.Price&lt;- as.numeric(all_data2$Stock.Price)&#10;all_data2$Outstanding.shares &lt;- gsub(&quot;,&quot;,&quot;&quot;,all_data2$Outstanding.shares)&#10;all_data2$Outstanding.shares&lt;- as.numeric(all_data2$Outstanding.shares)&#10;all_data2$Net.Debt.in.million &lt;- gsub(&quot;,&quot;,&quot;&quot;,all_data2$Net.Debt.in.million)&#10;all_data2$Net.Debt.in.million &lt;- as.numeric(all_data2$Net.Debt.in.million)&#10;all_data2$Ebit.in.million &lt;- gsub(&quot;,&quot;,&quot;&quot;,all_data2$Ebit.in.million)&#10;all_data2$Ebit.in.million &lt;- as.numeric(all_data2$Ebit.in.million)&#10;all_data2$ref &lt;- log(all_data2$Sales.in.million)*(-0.01567)+0.09412 # adjustment&#10;#################################&#10;all_data2&lt;-all_data2[complete.cases(all_data2),]&#10;all_data2$market_cap &lt;- all_data2$close_price * all_data2$Outstanding.shares/1000000&#10;all_data2$p_sales &lt;- all_data2$market_cap/all_data2$Sales.in.million&#10;all_data2$p_ebit &lt;- all_data2$market_cap/all_data2$Ebit.in.million&#10;all_data2$ev &lt;- all_data2$market_cap+all_data2$Net.Debt.in.million&#10;all_data2$EV.Sales&lt;- all_data2$ev/all_data2$Sales.in.million&#10;all_data2$EV.EBIT&lt;- all_data2$ev/all_data2$Ebit.in.million&#10;all_data2$Geography &lt;- trimws(all_data2$Geography)&#10;all_data2$Sector&lt;- trimws(all_data2$Sector)&#10;#####################################################################&#10;####################################################################&#10;use_data3&lt;- all_data2[which(all_data2$EV.EBIT&gt;=0 | all_data2$EV.Sales&gt;=0),]&#10;use_data3&lt;- use_data3[,c(8,10,11)]#15&#10;#input&lt;-c()&#10;input &lt;- c(as.numeric(n[2]),as.numeric(n[3]),as.numeric(n[4]))&#10;input_std &lt;- c((as.numeric(n[2])-mean(use_data3[,1]))/(sd(use_data3[,1])),(as.numeric(n[3])-mean(use_data3[,2]))/(sd(use_data3[,2])),(as.numeric(n[4])-mean(use_data3[,3]))/(sd(use_data3[,3])))&#10;standardise &lt;- function(x){&#10;  return((x-mean(x))/sd(x))&#10;}&#10;use_data3_std &lt;-data.frame(apply(use_data3,2,FUN=standardise)) &#10;similarity_loop &lt;- function(x,y,z){&#10;  &#10;  #x*c(4,3,2,1)&#10;  #print(x)&#10;  #print(y)&#10;  weights &lt;- c(0.4,0.4,0.2)&#10;  #w2&lt;- w1&#10;  #weights &lt;- c(w1,w2,w3,w4,w5)&#10;  sum &lt;- 0&#10;  for(var_count in 1:z){&#10;    sum&lt;- sum + weights[var_count]*(x[var_count]-y[var_count])^2&#10;    #out &lt;- sqrt(0.4*(x[1]-y[1])^2 +0.3*(x[2]-y[2])^2+0.2*(x[3]-y[3])^2+0.1*(x[4]-y[4])^2)&#10;  }&#10;  return(sqrt(sum))&#10;  &#10;}&#10;similarity &lt;- apply(use_data3,1, FUN= similarity_loop,y=input,z=3)&#10;similarity_std &lt;- apply(use_data3_std,1, FUN= similarity_loop,y=input_std,z=3)&#10;use_data4&lt;-cbind(all_data2,similarity=similarity_std)&#10;use_data5&lt;-use_data4[order(use_data4[,&quot;similarity&quot;],decreasing = FALSE),]&#10;#assign(&quot;no_adj&quot;,use_data5)&#10;industries&lt;- unique(use_data5$Industry)&#10;if (length(industries)&gt;1){&#10;  ind_1&lt;- use_data5[which(use_data5$Industry==industries[1]),]&#10;  ind_2&lt;- use_data5[which(use_data5$Industry==industries[2]),]&#10;  if (length(ind_1$Industry)&gt;=length(ind_2$Industry)){&#10;    ind_1&lt;-ind_1[1:length(ind_2$Industry),]&#10;  }else{&#10;    ind_2&lt;-ind_2[1:length(ind_1$Industry),]&#10;  }&#10;  #####################################&#10;  ind_1_shortlist&lt;- ind_1[1:min(length(ind_1$Industry),10),]&#10;  ind_1_row&lt;-nrow(ind_1_shortlist)&#10;  a&lt;-matrix(data=0,nrow = 2,ncol = 20)&#10;  for (i in 12:20){&#10;    a[1,i]&lt;-mean(ind_1_shortlist[,i])&#10;    a[2,i]&lt;-median(ind_1_shortlist[,i])&#10;  }&#10;  &#10;  a&lt;-data.frame(a)&#10;  names(a)&lt;-names(ind_1_shortlist)&#10;  ind_1_shortlist&lt;-rbind(ind_1_shortlist,a)&#10;  #####################################&#10;  ind_2_shortlist&lt;- ind_2[1:min(length(ind_2$Industry),10),]&#10;  ind_2_row&lt;-nrow(ind_2_shortlist)&#10;  a&lt;-matrix(data=0,nrow = 2,ncol = 20)&#10;  for (i in 12:20){&#10;    a[1,i]&lt;-mean(ind_2_shortlist[,i])&#10;    a[2,i]&lt;-median(ind_2_shortlist[,i])&#10;  }&#10;  &#10;  a&lt;-data.frame(a)&#10;  names(a)&lt;-names(ind_2_shortlist)&#10;  ind_2_shortlist&lt;-rbind(ind_2_shortlist,a)&#10;  ########################################&#10;  a&lt;-matrix(data=0,nrow = 2,ncol = 20)&#10;  for (i in 12:20){&#10;    a[1,i]&lt;-0.5*ind_1_shortlist[ind_1_row+1,i]+0.5*ind_2_shortlist[ind_2_row+1,i]&#10;    a[2,i]&lt;-0.5*ind_1_shortlist[ind_1_row+2,i]+0.5*ind_2_shortlist[ind_2_row+2,i]&#10;  }&#10;  &#10;  a&lt;-data.frame(a)&#10;  names(a)&lt;-names(ind_2_shortlist)&#10;  ind_shortlist&lt;-rbind(ind_1_shortlist,ind_2_shortlist)&#10;  ind_shortlist&lt;- rbind(ind_shortlist,a)&#10;  #######################################&#10;  &#10;}else{&#10;  ind_shortlist&lt;- use_data5[1:min(length(use_data5$Industry),10),]&#10;  a&lt;-matrix(data=0,nrow = 2,ncol = 20)&#10;  for (i in 12:20){&#10;    a[1,i]&lt;-mean(ind_shortlist[,i])&#10;    a[2,i]&lt;-median(ind_shortlist[,i])&#10;  }&#10;  &#10;  a&lt;-data.frame(a)&#10;  names(a)&lt;-names(ind_shortlist)&#10;  ind_shortlist&lt;-rbind(ind_shortlist,a)#colMeans(ind_shortlist[,12:20]))&#10;}&#10;#use_data6&lt;-use_data5[1:5,]&#10;################################################################&#10;#if (file.exists(&quot;C:\\script_testing_automation\\output.csv&quot;)) file.remove(&quot;C:\\script_testing_automation\\output.csv&quot;)&#10;#write.csv(ind_shortlist, file = &quot;C:\\script_testing_automation\\output.csv&quot;, row.names=FALSE)&#10;###############################################################&#10;&#10;    &#10;    return(list(ind_shortlist))&#10;}&#10;"/>
      </operator>
      <operator activated="true" class="write_csv" compatibility="8.1.000" expanded="true" height="82" name="Write CSV" width="90" x="447" y="85">
        <parameter key="csv_file" value="xyz"/>
        <parameter key="column_separator" value=";"/>
        <parameter key="write_attribute_names" value="true"/>
        <parameter key="quote_nominal_values" value="true"/>
        <parameter key="format_date_attributes" value="true"/>
        <parameter key="append_to_file" value="false"/>
        <parameter key="encoding" value="UTF-8"/>
      </operator>
      <connect from_op="Execute R" from_port="output 1" to_op="Write CSV" to_port="input"/>
      <connect from_op="Write CSV" from_port="through" to_port="result 1"/>
      <portSpacing port="source_input 1" spacing="0"/>
      <portSpacing port="sink_result 1" spacing="0"/>
      <portSpacing port="sink_result 2" spacing="0"/>
    </process>
  </operator>
</process>
